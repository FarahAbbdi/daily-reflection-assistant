import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

def analyze_daily_reflection(reflection_data, events):
    """
    Generate a markdown-formatted report of a student's daily reflection and events using AI.
    
    Args:
        reflection_data (dict): Contains reflection responses like mood, accomplishments, etc.
        events (list): List of today's event summaries.
    
    Returns:
        str: Markdown report generated by AI.
    """

    # Build the events section
    events_md = "## 1. Today's Events\n\n"
    if events:
        events_md += "\n".join([f"- {event}" for event in events])
    else:
        events_md += "- No events scheduled today."
    events_md += "\n\n---\n"

    # Build the reflection section using helper functions
    reflection_md = f"""
## 2. Daily Mood & Performance

- **Overall Day Rating:** {reflection_data.get("overall_day_rating", "Not provided")}  
- **Predominant Mood:** {reflection_data.get("mood_status", "Not provided")}  

---

## 3. Achievements

{format_bullet_list(reflection_data.get("daily_accomplishments"))}

---

## 4. Issues / Challenges

{format_bullet_list(reflection_data.get("daily_challenges"))}

---

## 5. Risk Indicators

{format_checklist(reflection_data.get("risk_indicators", []))}

---

## 6. Action Items for Tomorrow

{format_bullet_list(reflection_data.get("action_items"))}

---

## 7. Additional Reflection

> {reflection_data.get("additional_reflections", "No additional reflections.")}
"""

    # Combine sections for AI review
    full_prompt = f"""
You are an assistant that formats student daily reflections and events in Markdown format.
DO NOT add extra commentary or sections outside the provided structure.

### Data to use:
Reflection Data: {reflection_data}
Events: {events}

### Output in Markdown:
{events_md}{reflection_md}
"""

    response = client.responses.create(
        model="gpt-4o-mini",
        input=full_prompt
    )

    return response.output_text


# Utility Functions for Markdown Formatting
def format_bullet_list(text):
    if not text or text.strip() == "":
        return "- None"
    return "\n".join([f"- {item.strip()}" for item in text.split(",")])

def format_checklist(items):
    all_options = [
        "Woke up late / Poor morning routine",
        "Procrastination or distractions",
        "Missed deadlines or delayed submissions",
        "High workload or overlapping assignments",
        "Technical issues",
        "Difficulty understanding material",
        "Communication or collaboration issues",
        "No significant risks or blockers"
    ]
    result = []
    for option in all_options:
        result.append(f"- [x] {option}" if option in items else f"- [ ] {option}")
    return "\n".join(result)